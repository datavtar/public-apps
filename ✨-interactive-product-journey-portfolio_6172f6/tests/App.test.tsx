import '@testing-library/jest-dom';\nimport * as React from 'react';\nimport { render, screen } from '@testing-library/react';\nimport App from '../src/App'; // Adjust path if your structure differs\n\n// Mock localStorage\nconst localStorageMock = (() => {\n  let store: { [key: string]: string } = {};\n  return {\n    getItem(key: string) {\n      return store[key] || null;\n    },\n    setItem(key: string, value: string) {\n      store[key] = value.toString();\n    },\n    removeItem(key: string) {\n      delete store[key];\n    },\n    clear() {\n      store = {};\n    },\n    // Add length property for completeness if needed by any library\n    get length() {\n      return Object.keys(store).length;\n    },\n    // Add key(index) method if needed\n    key(index: number): string | null {\n      const keys = Object.keys(store);\n      return keys[index] || null;\n    }\n  };\n})();\nObject.defineProperty(window, 'localStorage', { value: localStorageMock });\n\n// Mock matchMedia\nObject.defineProperty(window, 'matchMedia', {\n  writable: true,\n  value: jest.fn().mockImplementation(query => ({\n    matches: false, // Default to light mode for predictability\n    media: query,\n    onchange: null,\n    addListener: jest.fn(), // deprecated\n    removeListener: jest.fn(), // deprecated\n    addEventListener: jest.fn(),\n    removeEventListener: jest.fn(),\n    dispatchEvent: jest.fn(),\n  })),\n});\n\n// Mock Recharts ResponsiveContainer - often needed in Jest\njest.mock('recharts', () => {\n    const OriginalRecharts = jest.requireActual('recharts');\n    return {\n        ...OriginalRecharts,\n        // Provide specific implementations for used components if necessary\n        ResponsiveContainer: ({ children }: { children: React.ReactNode }) => (\n            <div style={{ width: '100%', height: '100%' }} data-testid=\"responsive-container-mock\">{children}</div>\n        ),\n        LineChart: ({ children }: { children: React.ReactNode }) => <div data-testid=\"line-chart-mock\">{children}</div>,\n        Line: () => <div data-testid=\"line-mock\" />,\n        BarChart: ({ children }: { children: React.ReactNode }) => <div data-testid=\"bar-chart-mock\">{children}</div>,\n        Bar: () => <div data-testid=\"bar-mock\" />,\n        PieChart: ({ children }: { children: React.ReactNode }) => <div data-testid=\"pie-chart-mock\">{children}</div>,\n        Pie: ({ children }: { children: React.ReactNode }) => <div data-testid=\"pie-mock\">{children}</div>,\n        XAxis: () => <div data-testid=\"xaxis-mock\" />,\n        YAxis: () => <div data-testid=\"yaxis-mock\" />,\n        Tooltip: () => <div data-testid=\"tooltip-mock\" />,\n        Legend: () => <div data-testid=\"legend-mock\" />,\n        Cell: () => <div data-testid=\"cell-mock\" />,\n    };\n});\n\n// Mock scrollIntoView\nwindow.HTMLElement.prototype.scrollIntoView = jest.fn();\n// Mock scrollTo\nwindow.scrollTo = jest.fn();\n\ndescribe('App Component', () => {\n  beforeEach(() => {\n    // Clear mocks and localStorage before each test\n    localStorageMock.clear();\n    jest.clearAllMocks();\n    // Reset matchMedia mock to default (light mode)\n    Object.defineProperty(window, 'matchMedia', {\n      writable: true,\n      value: jest.fn().mockImplementation(query => ({\n        matches: false, // Default to light mode\n        media: query,\n        onchange: null,\n        addListener: jest.fn(),\n        removeListener: jest.fn(),\n        addEventListener: jest.fn(),\n        removeEventListener: jest.fn(),\n        dispatchEvent: jest.fn(),\n      })),\n    });\n    // Reset scroll mocks\n    window.HTMLElement.prototype.scrollIntoView = jest.fn();\n    window.scrollTo = jest.fn();\n  });\n\n  test('renders the HomePage by default and displays initial content', () => {\n    // Arrange\n    render(<App />);\n\n    // Act: No specific action needed for initial render check\n\n    // Assert\n    // Check for Name and Title in the Hero section (using heading roles)\n    expect(screen.getByRole('heading', { name: /Alex Johnson/i, level: 1 })).toBeInTheDocument();\n    expect(screen.getByRole('heading', { name: /Senior Product Manager/i, level: 2 })).toBeInTheDocument();\n\n    // Check for a button specific to HomePage actions\n    expect(screen.getByRole('button', { name: /My Experience/i })).toBeInTheDocument();\n\n    // Check for a section title\n    expect(screen.getByRole('heading', { name: /About Me/i, level: 2 })).toBeInTheDocument();\n\n    // Check if Header is rendered (using the home button's accessible name)\n    expect(screen.getByRole('button', { name: /Go to home page/i })).toBeInTheDocument();\n\n    // Check if Footer is rendered (using part of its text content)\n    expect(screen.getByText(/Copyright Â© 2025 of Datavtar Private Limited/i)).toBeInTheDocument();\n\n    // Check if the Recharts mock is rendered (optional, confirms mock works)\n    expect(screen.getByTestId('pie-chart-mock')).toBeInTheDocument();\n  });\n\n  test('initializes with default theme (light) when no preference or localStorage', () => {\n    // Arrange: Mocks are set to default (light) in beforeEach\n    render(<App />);\n\n    // Assert: Check if dark class is NOT applied initially\n    expect(document.documentElement).not.toHaveClass('dark');\n    // Check if the theme toggle button shows the Moon icon (indicating light mode)\n    expect(screen.getByLabelText(/switch to dark mode/i)).toBeInTheDocument();\n    expect(screen.queryByLabelText(/switch to light mode/i)).not.toBeInTheDocument();\n    // Check localStorage was not set automatically for light mode\n    expect(localStorageMock.getItem('darkMode')).toBeNull(); // or 'false' depending on implementation detail\n  });\n\n  test('initializes with dark theme based on prefers-color-scheme (dark)', () => {\n    // Arrange: Override matchMedia mock for this test\n    Object.defineProperty(window, 'matchMedia', {\n      writable: true,\n      value: jest.fn().mockImplementation(query => ({\n        matches: query === '(prefers-color-scheme: dark)', // Set to true only for dark mode query\n        media: query,\n        onchange: null,\n        addListener: jest.fn(),\n        removeListener: jest.fn(),\n        addEventListener: jest.fn(),\n        removeEventListener: jest.fn(),\n        dispatchEvent: jest.fn(),\n      })),\n    });\n\n    render(<App />);\n\n    // Assert: Check if dark class IS applied initially\n    expect(document.documentElement).toHaveClass('dark');\n    // Check if the theme toggle button shows the Sun icon (indicating dark mode)\n    expect(screen.getByLabelText(/switch to light mode/i)).toBeInTheDocument();\n    expect(screen.queryByLabelText(/switch to dark mode/i)).not.toBeInTheDocument();\n    // Check localStorage was set due to preference detection\n    expect(localStorageMock.getItem('darkMode')).toBe('true');\n  });\n\n  test('initializes with theme from localStorage (dark), overriding light preference', () => {\n    // Arrange: Set localStorage before rendering\n    localStorageMock.setItem('darkMode', 'true');\n    // Keep matchMedia as light (default from beforeEach), localStorage should override\n\n    render(<App />);\n\n    // Assert\n    expect(document.documentElement).toHaveClass('dark');\n    expect(screen.getByLabelText(/switch to light mode/i)).toBeInTheDocument();\n    expect(screen.queryByLabelText(/switch to dark mode/i)).not.toBeInTheDocument();\n    expect(localStorageMock.getItem('darkMode')).toBe('true'); // Verify it's still set\n  });\n\n  test('initializes with theme from localStorage (light), overriding dark preference', () => {\n    // Arrange: Set localStorage before rendering\n    localStorageMock.setItem('darkMode', 'false');\n    // Set matchMedia to dark, localStorage should override\n    Object.defineProperty(window, 'matchMedia', {\n      writable: true,\n      value: jest.fn().mockImplementation(query => ({\n        matches: query === '(prefers-color-scheme: dark)',\n      })),\n    });\n\n    render(<App />);\n\n    // Assert\n    expect(document.documentElement).not.toHaveClass('dark');\n    expect(screen.getByLabelText(/switch to dark mode/i)).toBeInTheDocument();\n    expect(screen.queryByLabelText(/switch to light mode/i)).not.toBeInTheDocument();\n    expect(localStorageMock.getItem('darkMode')).toBe('false'); // Verify it's still set\n  });\n\n  // Note: Testing actual navigation triggered by user interaction (clicks)\n  // is generally done in integration tests or tests for the specific components\n  // containing the navigation triggers (like Header or HomePage buttons).\n  // For App.test.tsx, confirming initial routing and setup is usually the focus.\n\n});\n