import '@testing-library/jest-dom';\nimport * as React from 'react';\nimport { render, screen, fireEvent, waitFor, act } from '@testing-library/react';\nimport App from '../src/App';\n\n// Mock the authContext\njest.mock('../src/contexts/authContext', () => ({\n  useAuth: () => ({\n    currentUser: {\n      first_name: 'Test',\n      last_name: 'User',\n      email: 'test@example.com',\n    },\n    logout: jest.fn(),\n  }),\n}));\n\n// Mock the AILayer component\njest.mock('../src/components/AILayer', () => {\n  const React = require('react');\n  const AILayer = React.forwardRef<any, any>(({ onResult, onError, onLoading }, ref) => {\n    React.useImperativeHandle(ref, () => ({\n      sendToAI: async (prompt: string) => {\n        onLoading(true);\n        try {\n          await new Promise(resolve => setTimeout(resolve, 50)); // Simulate async operation\n          if (prompt.includes('error')) {\n            onError('Simulated AI Error');\n            onResult(null);\n          } else if (prompt.includes('suggestions')) {\n            onResult(JSON.stringify({\n              suggestions: [\n                { title: 'AI Suggested Task', description: 'From AI', category: 'personal', priority: 'medium', estimatedTime: 60 }\n              ]\n            }));\n          } else {\n            onResult(`Mock AI Result for: ${prompt}`);\n          }\n        } catch (e) {\n          onError(e);\n        }\n        onLoading(false);\n      },\n    }));\n    return null;\n  });\n  return AILayer;\n});\n\n// Mock localStorage\nconst localStorageMock = (() => {\n  let store: { [key: string]: string } = {};\n  return {\n    getItem: (key: string) => store[key] || null,\n    setItem: (key: string, value: string) => { store[key] = value.toString(); },\n    removeItem: (key: string) => { delete store[key]; },\n    clear: () => { store = {}; }\n  };\n})();\n\nObject.defineProperty(window, 'localStorage', {\n  value: localStorageMock,\n});\n\ndescribe('App', () => {\n  beforeEach(() => {\n    // Clear localStorage before each test\n    localStorageMock.clear();\n    // Restore the default behavior of console.error to avoid test failures due to expected errors\n    jest.spyOn(console, 'error').mockImplementation(() => {});\n  });\n\n  afterEach(() => {\n    // Restore console.error to its original state\n    (console.error as jest.Mock).mockRestore();\n  });\n\n  // Test Case 1: Basic Rendering and Initial State\n  test('renders the application and displays dashboard initially', async () => {\n    // Arrange\n    render(<App />);\n\n    // Assert\n    expect(screen.getByText('TodoPro')).toBeInTheDocument();\n    expect(screen.getByText('Test User')).toBeInTheDocument();\n    expect(screen.getByRole('heading', { name: /Dashboard/i })).toBeInTheDocument();\n\n    // Assert initial stats from sample data\n    await waitFor(() => {\n      expect(screen.getByText('3')).toBeInTheDocument(); // Total Tasks (from sample data)\n      expect(screen.getByText('1')).toBeInTheDocument(); // Completed Tasks (from sample data)\n      expect(screen.getByText(/33.3%/)).toBeInTheDocument(); // Completion Rate (1/3 * 100)\n      expect(screen.getByText('1')).toBeInTheDocument(); // Work Completed\n      expect(screen.getByText('0')).toBeInTheDocument(); // Personal Completed\n    });\n\n    // Assert AI section is present\n    expect(screen.getByRole('heading', { name: /AI Productivity Assistant/i })).toBeInTheDocument();\n  });\n\n  // Test Case 2: Navigation to Tasks View\n  test('navigates to Tasks view when "Tasks" is clicked', async () => {\n    // Arrange\n    render(<App />);\n    const tasksNavLink = screen.getByRole('button', { name: /Tasks/i });\n\n    // Act\n    fireEvent.click(tasksNavLink);\n\n    // Assert\n    await waitFor(() => {\n      expect(screen.getByRole('heading', { name: /Tasks/i })).toBeInTheDocument();\n    });\n    expect(screen.getByPlaceholderText('Search tasks...')).toBeInTheDocument();\n    expect(screen.getByRole('button', { name: /New Task/i })).toBeInTheDocument();\n  });\n\n  // Test Case 3: Navigation to Analytics View\n  test('navigates to Analytics view when "Analytics" is clicked', async () => {\n    // Arrange\n    render(<App />);\n    const analyticsNavLink = screen.getByRole('button', { name: /Analytics/i });\n\n    // Act\n    fireEvent.click(analyticsNavLink);\n\n    // Assert\n    await waitFor(() => {\n      expect(screen.getByRole('heading', { name: /Analytics/i })).toBeInTheDocument();\n    });\n    expect(screen.getByRole('heading', { name: /Productivity Overview/i })).toBeInTheDocument();\n    expect(screen.getByRole('heading', { name: /Weekly Activity/i })).toBeInTheDocument();\n  });\n\n  // Test Case 4: Navigation to Settings View\n  test('navigates to Settings view when "Settings" is clicked', async () => {\n    // Arrange\n    render(<App />);\n    const settingsNavLink = screen.getByRole('button', { name: /Settings/i });\n\n    // Act\n    fireEvent.click(settingsNavLink);\n\n    // Assert\n    await waitFor(() => {\n      expect(screen.getByRole('heading', { name: /Settings/i })).toBeInTheDocument();\n    });\n    expect(screen.getByRole('heading', { name: /Preferences/i })).toBeInTheDocument();\n    expect(screen.getByRole('heading', { name: /Data Management/i })).toBeInTheDocument();\n  });\n\n  // Test Case 5: Toggle Dark Mode\n  test('toggles dark mode when moon/sun icon is clicked', async () => {\n    // Arrange\n    render(<App />);\n    const darkModeToggle = screen.getByLabelText('Toggle dark mode');\n\n    // Assert initial state\n    expect(document.documentElement).not.toHaveClass('dark');\n\n    // Act: Turn on dark mode\n    fireEvent.click(darkModeToggle);\n\n    // Assert\n    expect(document.documentElement).toHaveClass('dark');\n\n    // Act: Turn off dark mode\n    fireEvent.click(darkModeToggle);\n\n    // Assert\n    expect(document.documentElement).not.toHaveClass('dark');\n  });\n\n  // Test Case 6: Create New Task\n  test('allows creating a new task', async () => {\n    // Arrange\n    render(<App />);\n    fireEvent.click(screen.getByRole('button', { name: /Tasks/i }));\n    const newTaskButton = screen.getByRole('button', { name: /New Task/i });\n\n    // Act 1: Open modal\n    fireEvent.click(newTaskButton);\n    const titleInput = screen.getByPlaceholderText('Enter task title');\n    const descriptionInput = screen.getByPlaceholderText('Enter task description');\n    const dueDateInput = screen.getByLabelText('Due Date');\n    const createTaskButton = screen.getByRole('button', { name: /Create Task/i });\n\n    // Assert: Create Task button is initially disabled\n    expect(createTaskButton).toBeDisabled();\n\n    // Act 2: Fill form and submit\n    fireEvent.change(titleInput, { target: { value: 'Test New Task' } });\n    fireEvent.change(descriptionInput, { target: { value: 'This is a description for the new task.' } });\n    fireEvent.change(dueDateInput, { target: { value: '2025-12-31' } });\n\n    // Assert: Create Task button is enabled after title input\n    expect(createTaskButton).toBeEnabled();\n\n    fireEvent.click(createTaskButton);\n\n    // Assert: Modal closes and new task appears in the list\n    await waitFor(() => {\n      expect(screen.queryByRole('dialog')).not.toBeInTheDocument();\n    });\n    expect(screen.getByText('Test New Task')).toBeInTheDocument();\n    expect(screen.getByText('This is a description for the new task.')).toBeInTheDocument();\n    expect(screen.getByText(/2025-12-31/)).toBeInTheDocument();\n  });\n\n  // Test Case 7: Edit an Existing Task\n  test('allows editing an existing task', async () => {\n    // Arrange\n    render(<App />);\n    fireEvent.click(screen.getByRole('button', { name: /Tasks/i }));\n\n    // Find the 'Complete project proposal' task and click its edit button\n    const editButton = screen.getAllByLabelText('Edit task')[0];\n\n    // Act 1: Open edit modal\n    fireEvent.click(editButton);\n\n    const titleInput = screen.getByPlaceholderText('Enter task title');\n    const updateTaskButton = screen.getByRole('button', { name: /Update Task/i });\n\n    // Act 2: Change title and save\n    fireEvent.change(titleInput, { target: { value: 'Updated Project Proposal' } });\n    fireEvent.click(updateTaskButton);\n\n    // Assert: Modal closes and task title is updated\n    await waitFor(() => {\n      expect(screen.queryByRole('dialog')).not.toBeInTheDocument();\n    });\n    expect(screen.getByText('Updated Project Proposal')).toBeInTheDocument();\n    expect(screen.queryByText('Complete project proposal')).not.toBeInTheDocument();\n  });\n\n  // Test Case 8: Delete a Task\n  test('allows deleting a task', async () => {\n    // Arrange\n    render(<App />);\n    fireEvent.click(screen.getByRole('button', { name: /Tasks/i }));\n\n    // Find the 'Grocery shopping' task and click its delete button\n    const deleteButtons = screen.getAllByLabelText('Delete task');\n    const groceryShoppingTask = screen.getByText('Grocery shopping').closest('.card');\n    const groceryShoppingDeleteButton = groceryShoppingTask?.querySelector('[aria-label="Delete task"]');\n\n    // Act\n    if (groceryShoppingDeleteButton) {\n      fireEvent.click(groceryShoppingDeleteButton);\n    }\n\n    // Assert: Task is removed from the document\n    await waitFor(() => {\n      expect(screen.queryByText('Grocery shopping')).not.toBeInTheDocument();\n    });\n    expect(screen.getByText('Complete project proposal')).toBeInTheDocument(); // Other task still present\n  });\n\n  // Test Case 9: Toggle Task Status\n  test('toggles task status from todo to in-progress to completed', async () => {\n    // Arrange\n    render(<App />);\n    fireEvent.click(screen.getByRole('button', { name: /Tasks/i }));\n\n    const taskTitle = screen.getByText('Grocery shopping');\n    const toggleStatusButton = taskTitle.closest('.card')?.querySelector('button');\n\n    // Assert initial status (todo)\n    expect(toggleStatusButton).toHaveClass('border-gray-300'); // todo status\n\n    // Act 1: Click to change to in-progress\n    if (toggleStatusButton) {\n      fireEvent.click(toggleStatusButton);\n    }\n\n    // Assert: Status changes to in-progress\n    await waitFor(() => {\n      expect(toggleStatusButton).toHaveClass('bg-blue-500');\n    });\n\n    // Act 2: Click to change to completed\n    if (toggleStatusButton) {\n      fireEvent.click(toggleStatusButton);\n    }\n\n    // Assert: Status changes to completed\n    await waitFor(() => {\n      expect(toggleStatusButton).toHaveClass('bg-green-500');\n      expect(taskTitle).toHaveClass('line-through');\n    });\n\n    // Act 3: Click to change back to todo\n    if (toggleStatusButton) {\n      fireEvent.click(toggleStatusButton);\n    }\n\n    // Assert: Status changes back to todo\n    await waitFor(() => {\n      expect(toggleStatusButton).toHaveClass('border-gray-300');\n      expect(taskTitle).not.toHaveClass('line-through');\n    });\n  });\n\n  // Test Case 10: Filtering Tasks by Category\n  test('filters tasks by category', async () => {\n    // Arrange\n    render(<App />);\n    fireEvent.click(screen.getByRole('button', { name: /Tasks/i }));\n\n    // Assert initial state: all 3 tasks are visible\n    expect(screen.getByText('Complete project proposal')).toBeInTheDocument();\n    expect(screen.getByText('Grocery shopping')).toBeInTheDocument();\n    expect(screen.getByText('Team standup meeting')).toBeInTheDocument();\n\n    const filterSelect = screen.getByRole('combobox'); // Assuming only one select element for filter\n\n    // Act: Filter by 'Personal'\n    fireEvent.change(filterSelect, { target: { value: 'personal' } });\n\n    // Assert: Only 'Grocery shopping' (personal) task is visible\n    await waitFor(() => {\n      expect(screen.queryByText('Complete project proposal')).not.toBeInTheDocument();\n      expect(screen.getByText('Grocery shopping')).toBeInTheDocument();\n      expect(screen.queryByText('Team standup meeting')).not.toBeInTheDocument();\n    });\n\n    // Act: Filter by 'Work'\n    fireEvent.change(filterSelect, { target: { value: 'work' } });\n\n    // Assert: Only 'Complete project proposal' and 'Team standup meeting' (work) tasks are visible\n    await waitFor(() => {\n      expect(screen.getByText('Complete project proposal')).toBeInTheDocument();\n      expect(screen.queryByText('Grocery shopping')).not.toBeInTheDocument();\n      expect(screen.getByText('Team standup meeting')).toBeInTheDocument();\n    });\n\n    // Act: Filter by 'All'\n    fireEvent.change(filterSelect, { target: { value: 'all' } });\n\n    // Assert: All tasks are visible again\n    await waitFor(() => {\n      expect(screen.getByText('Complete project proposal')).toBeInTheDocument();\n      expect(screen.getByText('Grocery shopping')).toBeInTheDocument();\n      expect(screen.getByText('Team standup meeting')).toBeInTheDocument();\n    });\n  });\n\n  // Test Case 11: Searching Tasks\n  test('searches tasks by title, description, or tags', async () => {\n    // Arrange\n    render(<App />);\n    fireEvent.click(screen.getByRole('button', { name: /Tasks/i }));\n\n    const searchInput = screen.getByPlaceholderText('Search tasks...');\n\n    // Act: Search for 'project'\n    fireEvent.change(searchInput, { target: { value: 'project' } });\n\n    // Assert: Only 'Complete project proposal' is visible\n    await waitFor(() => {\n      expect(screen.getByText('Complete project proposal')).toBeInTheDocument();\n      expect(screen.queryByText('Grocery shopping')).not.toBeInTheDocument();\n      expect(screen.queryByText('Team standup meeting')).not.toBeInTheDocument();\n    });\n\n    // Act: Search for 'shopping'\n    fireEvent.change(searchInput, { target: { value: 'shopping' } });\n\n    // Assert: Only 'Grocery shopping' is visible\n    await waitFor(() => {\n      expect(screen.queryByText('Complete project proposal')).not.toBeInTheDocument();\n      expect(screen.getByText('Grocery shopping')).toBeInTheDocument();\n      expect(screen.queryByText('Team standup meeting')).not.toBeInTheDocument();\n    });\n\n    // Act: Clear search\n    fireEvent.change(searchInput, { target: { value: '' } });\n\n    // Assert: All tasks are visible again\n    await waitFor(() => {\n      expect(screen.getByText('Complete project proposal')).toBeInTheDocument();\n      expect(screen.getByText('Grocery shopping')).toBeInTheDocument();\n      expect(screen.getByText('Team standup meeting')).toBeInTheDocument();\n    });\n  });\n\n  // Test Case 12: AI Productivity Assistant - Task Suggestions\n  test('AI Productivity Assistant provides task suggestions', async () => {\n    // Arrange\n    render(<App />);\n    fireEvent.click(screen.getByRole('button', { name: /Dashboard/i })); // Ensure dashboard is visible\n    const aiTaskSuggestionButton = screen.getByRole('button', { name: /Task Suggestions/i });\n\n    // Act: Click AI task suggestions button\n    fireEvent.click(aiTaskSuggestionButton);\n\n    // Assert: AI Panel opens, loading state is shown\n    const aiPanelHeader = screen.getByRole('heading', { name: /AI Productivity Assistant/i });\n    expect(aiPanelHeader).toBeInTheDocument();\n    expect(screen.getByText('AI is analyzing your data...')).toBeInTheDocument();\n\n    // Assert: Result is displayed and new task is added\n    await waitFor(() => {\n      expect(screen.queryByText('AI is analyzing your data...')).not.toBeInTheDocument();\n      expect(screen.getByText(/Mock AI Result for:/)).toBeInTheDocument();\n    }, { timeout: 1000 });\n\n    fireEvent.click(screen.getByRole('button', { name: /Tasks/i }));\n\n    // Verify the new AI-suggested task is added to the list\n    await waitFor(() => {\n      expect(screen.getByText('AI Suggested Task')).toBeInTheDocument();\n    });\n    expect(screen.getByText('From AI')).toBeInTheDocument();\n  });\n\n  // Test Case 13: AI Productivity Assistant - Error State\n  test('AI Productivity Assistant shows error state', async () => {\n    // Arrange\n    render(<App />);\n    fireEvent.click(screen.getByRole('button', { name: /Dashboard/i }));\n    // Temporarily modify the mock to simulate an error\n    jest.mock('../src/components/AILayer', () => {\n      const React = require('react');\n      const AILayer = React.forwardRef<any, any>(({ onResult, onError, onLoading }, ref) => {\n        React.useImperativeHandle(ref, () => ({\n          sendToAI: async (prompt: string) => {\n            onLoading(true);\n            await new Promise(resolve => setTimeout(resolve, 50));\n            onError('Simulated AI Error');\n            onResult(null);\n            onLoading(false);\n          },\n        }));\n        return null;\n      });\n      return AILayer;\n    });\n    // Re-render the component to apply the new mock (needed when mock logic changes dynamically)\n    act(() => {\n      render(<App />);\n    });\n    const aiTaskSuggestionButton = screen.getByRole('button', { name: /Task Suggestions/i });\n\n    // Act: Click AI task suggestions button\n    fireEvent.click(aiTaskSuggestionButton);\n\n    // Assert: Error message is displayed\n    await waitFor(() => {\n      expect(screen.getByText('Error: Simulated AI Error')).toBeInTheDocument();\n    }, { timeout: 1000 });\n  });\n\n  // Test Case 14: Settings - Change Default Category\n  test('allows changing default category in settings', async () => {\n    // Arrange\n    render(<App />);\n    fireEvent.click(screen.getByRole('button', { name: /Settings/i }));\n    const defaultCategorySelect = screen.getByLabelText('Default Category');\n\n    // Assert initial default category (personal from settings initial state)\n    expect(defaultCategorySelect).toHaveValue('personal');\n\n    // Act\n    fireEvent.change(defaultCategorySelect, { target: { value: 'work' } });\n\n    // Assert updated default category\n    expect(defaultCategorySelect).toHaveValue('work');\n\n    // Verify persistence by re-rendering\n    act(() => { render(<App />); });\n    fireEvent.click(screen.getByRole('button', { name: /Settings/i }));\n    await waitFor(() => {\n      expect(screen.getByLabelText('Default Category')).toHaveValue('work');\n    });\n  });\n\n  // Test Case 15: Data Management - Export CSV\n  test('exports tasks as CSV', async () => {\n    // Arrange\n    render(<App />);\n    fireEvent.click(screen.getByRole('button', { name: /Settings/i }));\n\n    const exportCsvButton = screen.getByRole('button', { name: /Export CSV/i });\n\n    // Mock URL.createObjectURL and URL.revokeObjectURL\n    const mockCreateObjectURL = jest.fn();\n    const mockRevokeObjectURL = jest.fn();\n    Object.defineProperty(window.URL, 'createObjectURL', { value: mockCreateObjectURL });\n    Object.defineProperty(window.URL, 'revokeObjectURL', { value: mockRevokeObjectURL });\n\n    // Mock anchor tag click behavior\n    const mockClick = jest.fn();\n    jest.spyOn(document, 'createElement').mockReturnValue({\n      click: mockClick,\n      download: '',\n      href: ''\n    } as any);\n\n    // Act\n    fireEvent.click(exportCsvButton);\n\n    // Assert\n    expect(mockCreateObjectURL).toHaveBeenCalledTimes(1);\n    expect(mockCreateObjectURL.mock.calls[0][0]).toBeInstanceOf(Blob);\n    expect(mockClick).toHaveBeenCalledTimes(1);\n    expect(mockRevokeObjectURL).toHaveBeenCalledTimes(1);\n\n    // Verify CSV content (basic check)\n    const blob = mockCreateObjectURL.mock.calls[0][0];\n    const text = await new Response(blob).text();\n    expect(text).toContain('Title,Description,Category,Priority,Status,Due Date,Tags,Estimated Time');\n    expect(text).toContain('"Complete project proposal"');\n  });\n\n  // Test Case 16: Data Management - Delete All Data\n  test('deletes all tasks and templates after confirmation', async () => {\n    // Arrange\n    render(<App />);\n    fireEvent.click(screen.getByRole('button', { name: /Tasks/i }));\n    expect(screen.getAllByText(/task/).length).toBeGreaterThan(0); // Ensure tasks are present\n    fireEvent.click(screen.getByRole('button', { name: /Settings/i }));\n\n    const deleteAllDataButton = screen.getByRole('button', { name: /Delete All Data/i });\n\n    // Mock window.confirm\n    jest.spyOn(window, 'confirm').mockReturnValue(true);\n\n    // Act\n    fireEvent.click(deleteAllDataButton);\n\n    // Assert\n    expect(window.confirm).toHaveBeenCalledTimes(1);\n    expect(window.confirm).toHaveBeenCalledWith('Are you sure you want to delete all data? This action cannot be undone.');\n\n    // Navigate back to tasks and assert empty state\n    fireEvent.click(screen.getByRole('button', { name: /Tasks/i }));\n    await waitFor(() => {\n      expect(screen.getByText('No tasks found')).toBeInTheDocument();\n      expect(screen.queryByText('Complete project proposal')).not.toBeInTheDocument();\n    });\n  });\n});\n